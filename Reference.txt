https://github.com/wmonk/create-react-app-typescript

>npm install -g create-react-app

>create-react-app <project-name> --scripts-version=react-scripts-ts

>npm start

https://www.mockapi.io/ : creates dummy json for the project created

>npm install axios --save

//Axios doesnt has type definitions
>npm uninstall axios --save

>npm install superagent --save
//Installation of type-definitions of superagent
>npm install --save-dev @types/superagent

>npm run build

>npm run deploy

Package: react-router

http://definitelytyped.org/
https://microsoft.github.io/TypeSearch/

https://reactstrap.github.io/

>npm install --save reactstrap 
>npm install --save-dev @types/reactstrap


-----------------------------------------------------------

https://reacttraining.com/react-router/web/example/basic

>npm install react-router-dom --save
>npm install --save-dev @types/react-router-dom

==============================================
TO CREATE APP
Settings-->Github pages-enable
2. In package.json --> put attri "homepage": "copied url from Github pg"
3. install >npm install gh-pages --save-dev

4. Add below under scripts section
"predeploy": "npm run build"
"deploy" : "gh-pages -d build"

5. npm run deploy

6. Goto GitHub settings again-> select created branch and save

=============================================================
Info:

1. Use shouldComponentUpdate() when you don not want to update specific component unless there is a change/impact to it/child component
EX: set return= false for Product comp, if there is change is cart compo


2. StatelessFunctionComponent (SFC): does not have state, purpose is to just display the data retrieved from parent

3. Destructuring::
const myobj = {
	a: "abc",
	b: "bcd"
}

above function is == to: const {a, b} = myobj


Note: where u define states, define ur logic in same component

 
4. 
call(): used to execute fn and set context as well, immediately execute
apply(): same as call except it tks params in array
Ex: a.apply(obj, [10,20])
bind(): even before executing the context is set
Ex: const fn = a.bind(obj, 10,20);
fn();

POSTMAN: tool for API

https://developer.marvel.com/

https://jsbin.com/

Spread operator: can be used to create new instance
const arr = [1,2,3]
const arr1 = [...arr, 4]	//doesnt override original

const obj = {
	a: 'ab',
b: 'abc'
}

const obj1 = {
	...obj1
	b: 'newvalue',
	c: 'cc'
}

console.log(obj);	// a: "ab", b: "abc"
console.log(obj1); 	// b: "newvalue", c: "cc"
=====================================================================
1. npm install -g create-react-app
2. create-react-app <project-name> --scripts-version=react-scripts-ts

Search for dependency packages in:
http://definitelytyped.org/
Goto TypeSearch
https://microsoft.github.io/TypeSearch/

Install dependency packages
3. npm install bootstrap --save
4. npm install react-router-dom --save
5. npm install @types/react-router-dom --save-dev

----------------------------------------------------
Flux:
https://github.com/facebook/flux

1. npm install flux --save
2. npm install @types/flux --save-dev

Dispatcher: passes info between action(controller), store(model) & component(view)

Container: Smart component who know which action to call & which data to read from

--------------------
Unit testing frameworks:
Mocha / Jasmine

Assertion: meeting the expected results
Spying: to check whether function is called or not
Mocha + Chai library (for assertion) + Sinon (for Spying)

Jasmine has both

Test runners:Karma

Internally use Jasmine and wrapper on top of Jasmine called Jest (framework)

Enzyme: lib used to render React component, used for unit testing the ReactJs

npm i --save-dev enzyme enzyme-adapter-react-16
npm install @types/enzyme --save-dev

Authentication:

------
https://github.com/enaqx/awesome-react
